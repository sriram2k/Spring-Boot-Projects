package com.example.demo.controller;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.model.Project;
import com.example.demo.model.Requirement;
import com.example.demo.repo.ProjectRepo;
import com.example.demo.repo.RoleValidation;
import com.example.demo.repo.SequenceGenerator;

@CrossOrigin(maxAge = 3600)
@RestController
@RequestMapping("/api/v1/projectService")
public class ProjectController {

	@Autowired
	ProjectRepo prepo;

	@Autowired
	SequenceGenerator seq;

	@Autowired
	RoleValidation valid;

	Logger logger = LoggerFactory.getLogger(ProjectController.class);

	public boolean notValidInput(String field) {
		if (field == null || field.trim() == "")
			return true;
		return false;
	}

	// Adding a new Project
	@PostMapping("/addProject")
	public HashMap<String, Object> saveProject(@RequestBody Project p,
			@RequestHeader(name = "Authorization") String token) {
		logger.info("[ Service: POST ] add new project Started");
		HashMap<String, Object> hm = new HashMap<>();
		int err=0;
		if (valid.isValidUser(valid.getId(token), "addProject")) {
			if (notValidInput(p.getProjectName())) {
				hm.put("Error", "Invalid Project Name");
				logger.error("Can't add project: Invalid Project Name");
				err+=1;
			}
			if (notValidInput(p.getProjectDescription())) {
				hm.put("Error", "Invalid Project Description");
				logger.error("Can't add project: Invalid Project Description");
				err+=1;
			}
			if (notValidInput(p.getTargetedRelease())) {
				hm.put("Error", "Invalid Project Targeted Release");
				logger.error("Can't add project: Invalid Project Targeted Release");
				err+=1;
			}
			if(err>0)
				return hm;
			if (p.getProjectId() != null)
				logger.warn("Project ID is AutoGenerated");
			if(p.getStatus()!=null)
				logger.warn("Status is Automatically set");
			String eid = valid.getId(token);
			long pid = seq.generateSequenceforProject();
			String projectId = "P" + pid;
			p.setProjectId(projectId);
			p.setStatus("Active");
			p.setCreatedBy(eid);
			p.setUpdatedBy(eid);
			p.setLastUpdatedDate(new Date());
			p.setStartDate(new Date());
			List<Requirement> r = p.getRequirements();
			long c = 1;
			for (Requirement req : r) {
				if (notValidInput(req.getRequirementDescription())) {
					hm.put("Error", "Invalid Requirement Description");
					logger.error("Can't add project: Invalid Requirement Description");
					return hm;
				}
				if (req.getRequirementNo() != null)
					logger.warn("Requirement No is AutoGenerated");
				req.setRequirementNo(projectId + "R" + c);
				req.setStatus("New");
				c += 1;
			}
			Project newProject = prepo.saveProject(p);
			logger.info("Project Added Succesfully");
			hm.put("AddedProject", newProject);
			return hm;
		}
		return valid.error();
	}

	// Getting all the projects Present in the Database
	@GetMapping("/getAllProjects")
	public HashMap<String, Object> getAllProjects(@RequestHeader(name = "Authorization") String token) {
		logger.info("[ Service: GET ] Get All Projects Started");
		HashMap<String, Object> hm = new HashMap<>();
		if (valid.isValidUser(valid.getId(token), "getAllProjects")) {
			List<Project> newProjects = prepo.getAllProjects();
			if (newProjects != null) {
				logger.info("Projects fetch Successful");
				hm.put("Projects", newProjects);
				return hm;
			}
			logger.info("No Projects Found");
			hm.put("Response", "No projects Found");
			return hm;
		}
		return valid.error();
	}

	// Getting a particular Project with Project ID
	@GetMapping("/getProject/{pid}")
	public HashMap<String, Object> getProjectByPid(@PathVariable(value = "pid") String pid,
			@RequestHeader(name = "Authorization") String token) {
		logger.info("[ Service: GET ] Get Projects By ProjectID Started");
		HashMap<String, Object> hm = new HashMap<>();
		if (valid.isValidUser(valid.getId(token), "getProject")) {
			Project newProject = prepo.getProjectByPid(pid);
			if (newProject != null) {
				logger.info("Project fetch Successful");
				hm.put("ProjectDetails", newProject);
				return hm;
			}
			logger.info("No Projects Found");
			hm.put("Response", "No project Found");
			return hm;
		}
		return valid.error();
	}

	// Updating fields in the Project
	@PatchMapping("/editProject/{pid}")
	public HashMap<String, Object> updateProject(@RequestBody Project p, @PathVariable(value = "pid") String pid,
			@RequestHeader(name = "Authorization") String token) {
		logger.info("[ Service: PATCH ] update Project By ProjectID Started");
		HashMap<String, Object> hm = new HashMap<>();
		if (valid.isValidUser(valid.getId(token), "editProject")) {
			String eid = valid.getId(token);
			Project newProject = prepo.updateProject(p, pid, eid);
			if (newProject != null) {
				logger.info("Project Updated Successfully");
				hm.put("Updated Project", newProject);
				return hm;
			}
			logger.info("No Projects Found");
			hm.put("Response", "No project Found");
			return hm;
		}
		return valid.error();
	}

	// Deleting a Project
	@DeleteMapping("/deleteProject/{pid}")
	public HashMap<String, Object> deleteProject(@PathVariable(value = "pid") String pid,
			@RequestHeader(name = "Authorization") String token) {
		logger.info("[ Service: DELETE ] Delete Project By ProjectID Started");
		HashMap<String, Object> hm = new HashMap<>();
		if (valid.isValidUser(valid.getId(token), "deleteProject")) {
			String eid = valid.getId(token);
			Project deletedProject = prepo.deleteProject(pid, eid);
			if (deletedProject != null) {
				logger.info("Project Deleted Successfully");
				hm.put("Deleted Project", deletedProject);
				return hm;
			}
			logger.info("No Projects Found");
			hm.put("Response", "No project Found");
			return hm;
		}
		return valid.error();
	}

	// Updating Requirement of a particular Project
	@PatchMapping("/editRequirement/{rid}")
	public HashMap<String, Object> updateRequirement(@RequestBody Requirement r,
			@PathVariable(value = "rid") String rid, @RequestHeader(name = "Authorization") String token) {
		logger.info("[ Service: PATCH ] Update Requirement By RequirementID Started");
		HashMap<String, Object> hm = new HashMap<>();
		if (valid.isValidUser(valid.getId(token), "editRequirement")) {
			String eid = valid.getId(token);
			if (notValidInput(r.getRequirementDescription())) {
				hm.put("Error", "Invalid Requirement Description");
				logger.error("Can't update Requirement: Invalid Requirement Description");
				return hm;
			}
			Project newProject = prepo.updateRequirement(rid, r, eid);
			if (newProject != null) {
				logger.info("Requirment Updated Successfully");
				hm.put("Edited Requirement", newProject);
				return hm;
			}
			logger.info("No Projects Found");
			hm.put("Response", "No Requirement Found");
			return hm;
		}
		return valid.error();
	}

	// Adding a Requirement to a particular Project
	@PostMapping("/addRequirement/{pid}")
	public HashMap<String, Object> addRequirement(@RequestBody Requirement r, @PathVariable(value = "pid") String pid,
			@RequestHeader(name = "Authorization") String token) {
		logger.info("[ Service: POST ] Add Requirement with ProjectID Started");
		HashMap<String, Object> hm = new HashMap<>();
		if (valid.isValidUser(valid.getId(token), "addRequirement")) {
			String eid = valid.getId(token);
			if (notValidInput(r.getRequirementDescription())) {
				hm.put("Error", "Invalid Requirement Description");
				logger.error("Can't update Requirement: Invalid Requirement Description");
				return hm;
			}
			if (r.getRequirementNo() != null)
				logger.warn("Requirement No is AutoGenerated");
			Project newProject = prepo.addRequirement(r, pid, eid);
			if (newProject != null) {
				logger.info("Requirment Added Successfully");
				hm.put("Added Requirement", newProject);
				return hm;
			}
			logger.info("No Projects Found");
			hm.put("Response", "No project Found");
			return hm;
		}
		return valid.error();
	}

	// deleting a Requirement for a particular Project
	@DeleteMapping("/deleteRequirement/{rid}")
	public HashMap<String, Object> deleteRequirement(@PathVariable(value = "rid") String rid,
			@RequestHeader(name = "Authorization") String token) {
		logger.info("[ Service: DELETE ] Delete Requirement with RequirementID Started");
		HashMap<String, Object> hm = new HashMap<>();
		if (valid.isValidUser(valid.getId(token), "deleteRequirement")) {
			String eid = valid.getId(token);
			Project newProject = prepo.deleteRequirement(rid, eid);
			if (newProject != null) {
				logger.info("Requirement Deleted Successfully");
				hm.put("Deleted Requirement", newProject);
				return hm;
			}
			logger.info("No Projects Found");
			hm.put("Response", "No project Found");
			return hm;
		}
		return valid.error();
	}
}
